package com.zzx.backFunc.yylive.control.action;

import java.security.interfaces.RSAPrivateKey;
import java.util.HashMap;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;

import com.zzx.backFunc.yylive.control.service.SysYYLiveManageService;
import com.zzx.pojo.SysLiveUser;
import com.zzx.pojo.SysUser;
import com.zzx.pojo.SysYYLiveUser;
import com.zzx.sys.control.JsonUtil;
import com.zzx.sys.control.RSAUtils;
import com.zzx.sys.control.Result;
import com.zzx.sys.control.util.MyException;
import com.zzx.sys.control.util.PaginationResult;
import com.zzx.sys.control.util.PasswordEncoder;
import com.zzx.sys.control.util.PojoDomain;
import com.zzx.sys.control.util.SysUserHelper;

/**
* @author 郑志欣
* @date 2017年9月19日
*/
@Controller
public class SysYYLiveManageController {
	@Autowired
	SysYYLiveManageService yyservice;
	
	@RequestMapping("/yylive/list")
	public void getLiveUser(HttpServletRequest request,HttpServletResponse response) {
		PaginationResult result = new PaginationResult();
		String keyword = request.getParameter("keyword");
		int page_number = Integer.parseInt(request.getParameter("page_number"));
		int page_size = Integer.parseInt(request.getParameter("page_size"));
		PojoDomain<SysYYLiveUser> pojoDomain = yyservice.getLiveUser(page_number,page_size,keyword);
		
		result.getData().put("live_list", pojoDomain.getPojolist());
		result.setPageNumber(pojoDomain.getPage_number());
		result.setPageSize(pojoDomain.getPage_size());
		result.setPageTotal(pojoDomain.getPage_total());
		result.setTotalCount(pojoDomain.getTotal_count());
		JsonUtil.output(response, result);
	}

	/**
	 * 删除
	 * @param request
	 * @param response
	 * @throws Exception
	 */
	@RequestMapping("/yylive/delete")
	public void delete(HttpServletRequest request,HttpServletResponse response) throws MyException {
		Result result = new Result();
		String id = request.getParameter("id");
		String[] ids=id.split(",");
		try{
			for (int i = 0; i < ids.length; i++) {
				if(ids[i]!=null) {
					yyservice.delete(ids[i]);
				}else {
					result.setCode(1);
					result.setMessage("选择的内容为空！");
				}
			}
		}catch(Exception e){
			result.setCode(-2);
			result.setMessage(e.getMessage());
			JsonUtil.outputJson(response, result);
		}
		JsonUtil.outputJson(response, result);
	}
	
	@RequestMapping("/yylive/enable")
	public void enable(HttpServletRequest request,HttpServletResponse response)throws MyException{
		Result result = new Result();
		String account=request.getParameter("account");
		try {
			yyservice.saveEnable(account);
			result.setCode(0);
			result.setMessage("启用成功！");
			JsonUtil.outputJson(response, result);
		} catch (Exception e) {
			result.setCode(-1);
			result.setMessage(e.getMessage());
			JsonUtil.outputJson(response, result);
		}
	}
	
	@RequestMapping("/yylive/disable")
	public void disable(HttpServletRequest request,HttpServletResponse response)throws MyException{
		Result result = new Result();
		String account=request.getParameter("account");
		try {
			yyservice.saveDisable(account);
			result.setCode(0);
			result.setMessage("禁用成功！");
			JsonUtil.outputJson(response, result);
		} catch (Exception e) {
			result.setCode(-1);
			result.setMessage(e.getMessage());
			JsonUtil.outputJson(response, result);
		}
	}
	
	/**
	 * 重置密码
	 * @param request
	 * @param response
	 * @throws MyException
	 */
	@RequestMapping("/yylive/reset")
	public void reset(HttpServletRequest request,HttpServletResponse response) throws MyException {
		Result result=new Result();
		String account=request.getParameter("account");
		String password=request.getParameter("password");
		
		HashMap<String, Object> map = (HashMap<String, Object>)request.getSession().getAttribute("securityKey");
		//获取私钥    
		RSAPrivateKey privateKey = (RSAPrivateKey) map.get("private");    
		
		try {
			password = RSAUtils.decryptByPrivateKey(password, privateKey);
		} catch (Exception e) {
			throw new MyException("密码通过秘钥解密错误");
		} 
		
		PasswordEncoder passwordEncoder = new PasswordEncoder();
		password = passwordEncoder.encodePassword(password, account);
		
		try {
			yyservice.updatePassword(account,password);
			result.setCode(1);
			result.setMessage("重置密码成功！");
			JsonUtil.outputJson(response, result);
		} catch (Exception e) {
			result.setCode(-1);
			result.setMessage(e.getMessage());
			JsonUtil.outputJson(response, result);
		}
	}
}
